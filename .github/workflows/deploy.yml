name: deploy
on:
  push:
    branches: [ main, dev ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: JDK 11 설정
        uses: actions/setup-java@v3
        with:
          java-version: 11.0.19
          distribution: 'adopt'

      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: 현재 브랜치 이름 설정
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: appspec.yml 파일 생성
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            touch ./appspec.yml
            echo "${{ secrets.APPSPEC_PROD }}" > ./appspec.yml
          else
            touch ./appspec.yml
            echo "${{ secrets.APPSPEC_DEV }}" > ./appspec.yml
          fi
          echo "appspec.yml 파일 내용:"
          cat ./appspec.yml

      - name: application.yml 파일 생성
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            touch ./src/main/resources/application-prod.yml
            echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml
          else
            touch ./src/main/resources/application-dev.yml
            echo "${{ secrets.APPLICATION_DEV }}" > ./src/main/resources/application-dev.yml
          fi

      - name: gradlew 파일에 실행 권한 부여
        run: chmod +x gradlew
        shell: bash

      - name: 프로젝트 빌드 / 테스트
        continue-on-error: true
        run: ./gradlew clean build
        shell: bash

      - name: AWS 자격 증명 구성
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 정적 리소스를 S3 버킷으로 업로드
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            aws s3 sync ./src/main/resources/static s3://${{ secrets.AWS_S3_BUCKET_NAME_PROD }}
          else
            aws s3 sync ./src/main/resources/static s3://${{ secrets.AWS_S3_BUCKET_NAME_DEV }}
          fi

      - name: 템플릿 파일을 S3 버킷으로 업로드
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            aws s3 sync ./src/main/resources/templates s3://${{ secrets.AWS_S3_BUCKET_NAME_PROD }}
          else
            aws s3 sync ./src/main/resources/templates s3://${{ secrets.AWS_S3_BUCKET_NAME_DEV }}
          fi

      - name: zip으로 압축
        run: zip -r ./demo.zip .
        shell: bash

      - name: 압축 파일을 S3 버킷으로 업로드
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            aws s3 cp ./demo.zip s3://${{ secrets.AWS_S3_BUCKET_NAME_PROD }}/build/demo.zip
          else
            aws s3 cp ./demo.zip s3://${{ secrets.AWS_S3_BUCKET_NAME_DEV }}/build/demo.zip
          fi

      - name: CodeDeploy 실행
        run: |
          if [ "${BRANCH_NAME}" = "main" ]; then
            aws deploy create-deployment --application-name ${{ secrets.CODEDEPLOY_NAME_PROD }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP_PROD }} --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME_PROD }},bundleType=zip,key=build/demo.zip --region ${{ secrets.AWS_REGION }}
          else
            aws deploy create-deployment --application-name ${{ secrets.CODEDEPLOY_NAME_DEV }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP_DEV }} --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME_DEV }},bundleType=zip,key=build/demo.zip --region ${{ secrets.AWS_REGION }}
          fi

      - name: CloudFront 캐시 무효화
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_DISTRIBUTION_ID }} --paths "/*"